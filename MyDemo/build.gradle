apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"
    //自动计算versionCode
    def versionFile = file("version.properties")
    def int verCode
    def buildType
    if (versionFile.canRead()){
        Properties verPro = new Properties()
        verPro.load(new FileInputStream(versionFile))
        def runTasks = gradle.startParameter.taskNames
        verCode = verPro["VERSION_CODE"].toInteger()
        if (':app:assembleRelease' in runTasks){
            verPro['VERSION_CODE'] = (verCode + 1).toString()
            verPro.store(versionFile.newWriter(), null)
        }
        defaultConfig {
            applicationId "com.thedemo"
            minSdkVersion 15
            targetSdkVersion 19
            versionCode verCode
            versionName "1.0"
            manifestPlaceholders = [label:"@string/app_name"]
        }
    }else{
        throw new GradleException("Could not read version.properties!")
    }

    //签名设置
    signingConfigs {
        debug {
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
        }
        preview {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
        release {
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
        }
    }

    buildTypes {
        debug {
            manifestPlaceholders = [label:"Debug"]
            signingConfig signingConfigs.debug
            minifyEnabled false
        }

        preview {
            manifestPlaceholders = [label:"Preview"]
            signingConfig signingConfigs.preview
            debuggable true
            minifyEnabled false
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true//是否启动混淆
            shrinkResources true //是否移除无用资源文件，shrinkResources依赖于minifyEnabled，必须和minifyEnabled一起用
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    //渠道打包信息
    productFlavors {
        googleplay {
            applicationId "com.thedemo.googleplay"
//            versionName verCode+"_"+name
        }
        baidu {
            applicationId "com.thedemo.baidu"
//            versionName verCode+"_"+name
        }
    }
    //批量处理渠道versionName
    productFlavors.all{
        flavor ->
            print(properties.values())
            flavor.versionName = verCode+"_"+buildType+"_"+name
    }
    // rename the apk with the version name
    // add output file sub folder by build type
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent + "/${variant.buildType.name}",
                    "demos-${variant.buildType.name}-${variant.versionName}-${releaseTime()}.apk".toLowerCase())
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    //leakcannry
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    previewCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    //testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
}

def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}
